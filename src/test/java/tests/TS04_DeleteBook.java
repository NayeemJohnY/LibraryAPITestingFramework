package tests;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import org.hamcrest.Matchers;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import pojos.Book;

public class TS04_DeleteBook extends BaseTest {

  protected static final String USER_ADMIN_TOKEN = "admin-token";

  private int bookId;

  @BeforeTest
  public void createBookBeforeDeleteBookTest() {
    Book book = new Book("Delete API Test Book Title ", "Delete API Test Book Author ");
    Book responseBook =
        RestAssured.given()
            .auth()
            .oauth2(USER_AUTH_TOKEN)
            .contentType(ContentType.JSON)
            .body(book)
            .when()
            .post()
            .then()
            .log()
            .ifValidationFails()
            .statusCode(201)
            .extract()
            .as(Book.class);
    Assert.assertNotNull(responseBook.getId(), "ID should be generated by the server");
    Assert.assertEquals(responseBook.getTitle(), book.getTitle(), "Title mismatch");
    Assert.assertEquals(responseBook.getAuthor(), book.getAuthor(), "Author mismatch");

    bookId = responseBook.getId();
  }

  @Test
  public void shouldReturn401WhenNoAuthTokenProvidedOnDelete() {

    RestAssured.given()
        .pathParam("bookId", bookId)
        .when()
        .delete("/{bookId}")
        .then()
        .statusCode(401)
        .body("error", Matchers.equalTo("Unauthorized. No token provided."));
  }

  @Test
  public void shouldReturn403WhenUserAuthTokenIsProvidedOnDelete() {
    RestAssured.given()
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .pathParam("bookId", bookId)
        .when()
        .delete("/{bookId}")
        .then()
        .statusCode(403)
        .body("error", Matchers.equalTo("Forbidden. Admin access required."));
  }

  @Test
  public void shouldDeleteBookWhenBookIdIsValid() {
    RestAssured.given()
        .auth()
        .oauth2(USER_ADMIN_TOKEN)
        .pathParam("bookId", bookId)
        .when()
        .delete("/{bookId}")
        .then()
        .statusCode(204);
  }

  @Test(dependsOnMethods = "shouldDeleteBookWhenBookIdIsValid")
  public void shouldReturn404WhenBookIsAlreadyDeletedOrNotExists() {
    RestAssured.given()
        .auth()
        .oauth2(USER_ADMIN_TOKEN)
        .pathParam("bookId", bookId)
        .when()
        .delete("/{bookId}")
        .then()
        .statusCode(404)
        .body("error", Matchers.equalTo("Book not found"));
  }
}
