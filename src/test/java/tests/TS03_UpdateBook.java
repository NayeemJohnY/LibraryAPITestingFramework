package tests;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import org.hamcrest.Matchers;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import pojos.Book;

/** Test cases for updating books via the API. */
public class TS03_UpdateBook extends BaseTest {

  private int bookId;

  /** Creates a book before running update book tests. */
  @BeforeTest
  public void createBookBeforeUpdateBookTest() {
    Book book = new Book("PUT API Test Book Title ", "PUT API Test Book Author ");
    Book responseBook =
        RestAssured.given()
            .auth()
            .oauth2(USER_AUTH_TOKEN)
            .contentType(ContentType.JSON)
            .body(book)
            .when()
            .post()
            .then()
            .statusCode(201)
            .extract()
            .as(Book.class);
    Assert.assertNotNull(responseBook.getId(), "ID should be generated by the server");
    Assert.assertEquals(responseBook.getTitle(), book.getTitle(), "Title mismatch");
    Assert.assertEquals(responseBook.getAuthor(), book.getAuthor(), "Author mismatch");

    bookId = responseBook.getId();
  }

  /** Should update the author of a book. */
  @Test
  public void shouldUpdateBookAuthor() {
    RestAssured.given()
        .contentType(ContentType.JSON)
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .pathParam("bookId", bookId)
        .body("{\"author\": \"Test PUT API Book Author Name\"}")
        .when()
        .put("/{bookId}")
        .then()
        .statusCode(200)
        .body("id", Matchers.equalTo(bookId))
        .body("author", Matchers.equalTo("Test PUT API Book Author Name"));
  }

  /** Should update the title of a book. */
  @Test
  public void shouldUpdateBookTitle() {
    RestAssured.given()
        .contentType(ContentType.JSON)
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .pathParam("bookId", bookId)
        .body("{\"title\": \"Test PUT API Book Title\"}")
        .when()
        .put("/{bookId}")
        .then()
        .statusCode(200)
        .body("id", Matchers.equalTo(bookId))
        .body("title", Matchers.equalTo("Test PUT API Book Title"));
  }

  /** Should return 401 when no auth is provided on update book. */
  @Test
  public void shouldReturn401WhenNoAuthIsProvidedOnUpdateBook() {
    RestAssured.given()
        .contentType(ContentType.JSON)
        .pathParam("bookId", bookId)
        .when()
        .put("/{bookId}")
        .then()
        .statusCode(401)
        .body("error", Matchers.equalTo("Unauthorized. No token provided."));
  }

  /** Should return 404 when book with ID does not exist. */
  @Test
  public void shouldReturn404WhenBookWithIdIsNotExists() {
    RestAssured.given()
        .contentType(ContentType.JSON)
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .pathParam("bookId", 890761)
        .when()
        .put("/{bookId}")
        .then()
        .statusCode(404)
        .body("error", Matchers.equalTo("Book not found"));
  }

  /** Should return 400 when a different book ID is given in the body. */
  @Test
  public void shouldReturn400WhenDifferentBookIdIsGivenInBody() {
    RestAssured.given()
        .contentType(ContentType.JSON)
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .pathParam("bookId", bookId)
        .body("{\"author\": \"Updated Author Name\", \"id\": 345}")
        .when()
        .put("/{bookId}")
        .then()
        .statusCode(400)
        .body("error", Matchers.equalTo("Updating book ID is not allowed."));
  }

  /** Should update the book when the same book ID is given in the body. */
  @Test
  public void shouldUpdateBookWhenSameBookIdIsGivenInBody() {
    Book book = new Book(bookId, "Test PUT API Book Title 2", "Test PUT API Book Author Name 2");
    Book responseBook =
        RestAssured.given()
            .contentType(ContentType.JSON)
            .auth()
            .oauth2(USER_AUTH_TOKEN)
            .pathParam("bookId", bookId)
            .body(book)
            .when()
            .put("/{bookId}")
            .then()
            .statusCode(200)
            .extract()
            .as(Book.class);
    Assert.assertEquals(book.getId(), responseBook.getId());
    Assert.assertEquals(book.getAuthor(), responseBook.getAuthor());
    Assert.assertEquals(book.getTitle(), responseBook.getTitle());
  }
}
