package tests;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import org.hamcrest.Matchers;
import org.testng.Assert;
import org.testng.annotations.Test;
import pojos.Book;
import utils.JsonUtils;

public class TS01_CreateBook extends BaseTest {

  @Test
  public void shouldCreateBookWhenTitleAndAuthorAreValid() {
    Book book = new Book("Rest API Automation", "John Ferd");
    Book responseBook =
        retryRequest(
                () ->
                    RestAssured.given()
                        .auth()
                        .oauth2(USER_AUTH_TOKEN)
                        .contentType(ContentType.JSON)
                        .body(book)
                        .when()
                        .post())
            .then()
            .statusCode(201)
            .extract()
            .response()
            .as(Book.class);
    Assert.assertNotNull(responseBook.getId(), "ID should be generated by the server");
    Assert.assertEquals(responseBook.getTitle(), book.getTitle(), "Title mismatch");
    Assert.assertEquals(responseBook.getAuthor(), book.getAuthor(), "Author mismatch");
  }

  @Test(dependsOnMethods = "shouldCreateBookWhenTitleAndAuthorAreValid")
  public void shouldRejectDuplicateBookCreation() {
    Book book = new Book("Rest API Automation", "John Ferd");
    RestAssured.given()
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .contentType(ContentType.JSON)
        .body(book)
        .when()
        .post()
        .then()
        .statusCode(409)
        .body("error", Matchers.equalTo("A book with the same title and author already exists"));
  }

  @Test
  public void shouldCreateBookWithJsonStringifyWhenTitleAndAuthorAreValid() {
    Book book = new Book("Quick Start and Build API using Nodejs express", "Nayeem John");
    String bookString = JsonUtils.JsonStringify(book);
    RestAssured.given()
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .contentType(ContentType.JSON)
        .body(bookString)
        .when()
        .post()
        .then()
        .statusCode(201)
        .body("id", Matchers.notNullValue())
        .body("author", Matchers.equalTo(book.getAuthor()))
        .body("title", Matchers.equalTo(book.getTitle()));
  }

  @Test(dependsOnMethods = "shouldCreateBookWithJsonStringifyWhenTitleAndAuthorAreValid")
  public void shouldCreateBookWhenTitleIsDifferentForSameAuthor() {
    Book book = new Book("TestNG Annoation Introduction", "Nayeem John");
    String bookString = JsonUtils.JsonStringify(book);
    RestAssured.given()
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .contentType(ContentType.JSON)
        .body(bookString)
        .when()
        .post()
        .then()
        .statusCode(201)
        .body("id", Matchers.notNullValue())
        .body("author", Matchers.equalTo(book.getAuthor()))
        .body("title", Matchers.equalTo(book.getTitle()));
  }

  @Test(dependsOnMethods = "shouldCreateBookWithJsonStringifyWhenTitleAndAuthorAreValid")
  public void shouldCreateBookWhenAuthorIsDifferentForSameBook() {
    Book book = new Book("TestNG Annoation Introduction", "David James");
    String bookString = JsonUtils.JsonStringify(book);
    RestAssured.given()
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .contentType(ContentType.JSON)
        .body(bookString)
        .when()
        .post()
        .then()
        .statusCode(201)
        .body("id", Matchers.notNullValue())
        .body("author", Matchers.equalTo(book.getAuthor()))
        .body("title", Matchers.equalTo(book.getTitle()));
  }

  @Test
  public void shouldReturn401WhenNoAuthTokenProvided() {
    Book book = new Book("Rest API Automation", "John Ferd");
    RestAssured.given()
        .contentType(ContentType.JSON)
        .body(book)
        .when()
        .post()
        .then()
        .statusCode(401)
        .body("error", Matchers.equalTo("Unauthorized. No token provided."));
  }

  @Test
  public void shouldRejectBookWithMissingTitleAndAuthor() {
    Book book = new Book();
    RestAssured.given()
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .contentType(ContentType.JSON)
        .body(book)
        .when()
        .post()
        .then()
        .statusCode(400)
        .body("error", Matchers.equalTo("Both title and author are required."));
  }

  @Test
  public void shouldRejectBookWhenTitleIsMissing() {
    Book book = new Book();
    book.setAuthor("OnlyAuthor");
    RestAssured.given()
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .contentType(ContentType.JSON)
        .body(book)
        .when()
        .post()
        .then()
        .statusCode(400)
        .body("error", Matchers.equalTo("Both title and author are required."));
  }

  @Test
  public void shouldRejectBookWhenAuthorIsMissing() {
    Book book = new Book();
    book.setTitle("OnlyTitle");
    RestAssured.given()
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .contentType(ContentType.JSON)
        .body(book)
        .when()
        .post()
        .then()
        .statusCode(400)
        .body("error", Matchers.equalTo("Both title and author are required."));
  }

  @Test
  public void shouldRejectBookCreationWithClientProvidedId() {
    Book book = new Book(123, "Rest API Automation", "John Ferd");
    RestAssured.given()
        .auth()
        .oauth2(USER_AUTH_TOKEN)
        .contentType(ContentType.JSON)
        .body(book)
        .when()
        .post()
        .then()
        .statusCode(400)
        .body("error", Matchers.equalTo("ID must not be provided when creating a book"));
  }
}
